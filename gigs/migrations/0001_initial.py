# Generated by Django 5.2.3 on 2025-06-30 20:23

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tutors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Gig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title or name of the tutoring gig', max_length=200)),
                ('subject_name', models.CharField(help_text='Subject to be tutored (e.g., Mathematics, Physics, English)', max_length=100)),
                ('level', models.CharField(choices=[('primary', 'Primary School'), ('middle', 'Middle School'), ('high_school', 'High School'), ('college_prep', 'College Preparatory'), ('undergraduate', 'Undergraduate'), ('graduate', 'Graduate Level'), ('professional', 'Professional Development'), ('adult_education', 'Adult Education'), ('other', 'Other')], help_text='Educational level of the tutoring', max_length=20)),
                ('total_tutor_remuneration', models.DecimalField(decimal_places=2, help_text='Total amount to be paid to the tutor', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_client_fee', models.DecimalField(decimal_places=2, help_text='Total amount charged to the client', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_hours', models.DecimalField(decimal_places=2, help_text='Total planned hours for this gig', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.50'))])),
                ('total_hours_remaining', models.DecimalField(decimal_places=2, help_text='Hours remaining to complete the gig', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('description', models.TextField(blank=True, help_text='Detailed description of the tutoring requirements')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', help_text='Current status of the gig', max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level of the gig', max_length=10)),
                ('client_name', models.CharField(help_text='Name of the client', max_length=100)),
                ('client_email', models.EmailField(help_text="Client's email address", max_length=254)),
                ('client_phone', models.CharField(blank=True, help_text="Client's phone number", max_length=17)),
                ('start_date', models.DateField(help_text='Planned start date for the tutoring')),
                ('end_date', models.DateField(help_text='Planned end date for the tutoring')),
                ('actual_start_date', models.DateField(blank=True, help_text='Actual date when tutoring started', null=True)),
                ('actual_end_date', models.DateField(blank=True, help_text='Actual date when tutoring ended', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the gig was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the gig was last updated')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about the gig')),
                ('tutor', models.ForeignKey(help_text='Assigned tutor for this gig', on_delete=django.db.models.deletion.CASCADE, related_name='gigs', to='tutors.tutor')),
            ],
            options={
                'verbose_name': 'Gig',
                'verbose_name_plural': 'Gigs',
                'db_table': 'gigs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GigSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_date', models.DateField(help_text='Date of the tutoring session')),
                ('start_time', models.TimeField(help_text='Start time of the session')),
                ('end_time', models.TimeField(help_text='End time of the session')),
                ('hours_logged', models.DecimalField(decimal_places=2, help_text='Hours logged for this session', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.25'))])),
                ('session_notes', models.TextField(blank=True, help_text='Notes about what was covered in this session')),
                ('student_attendance', models.BooleanField(default=True, help_text='Whether the student attended the session')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gig', models.ForeignKey(help_text='Associated gig', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='gigs.gig')),
            ],
            options={
                'verbose_name': 'Gig Session',
                'verbose_name_plural': 'Gig Sessions',
                'db_table': 'gig_sessions',
                'ordering': ['-session_date', '-start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='gig',
            index=models.Index(fields=['status'], name='gigs_status_2033ad_idx'),
        ),
        migrations.AddIndex(
            model_name='gig',
            index=models.Index(fields=['tutor', 'status'], name='gigs_tutor_i_13bf72_idx'),
        ),
        migrations.AddIndex(
            model_name='gig',
            index=models.Index(fields=['subject_name', 'level'], name='gigs_subject_15a29b_idx'),
        ),
        migrations.AddIndex(
            model_name='gig',
            index=models.Index(fields=['start_date', 'end_date'], name='gigs_start_d_bd7459_idx'),
        ),
    ]
